<?php

/**
 * Vsite public access field.
 */
define('VSITE_ACCESS_FIELD', 'group_access');

/**
 * Implements hook_views_api().
 */
function vsite_access_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'vsite_access'),
  );
}


/**
 * Implements hook_node_access().
 */
function vsite_access_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : (is_array($node) ? $node['type'] : $node->type);

  if ($op != 'view' || !($vsite = spaces_get_space())) {
    // If we are trying to create content outside a group and do not have permission to do so
    if ($op == 'create' && og_is_group_content_type('node', $type) && !user_access('create ' . $type . ' content', $account)) {
      return NODE_ACCESS_DENY;
    }

    // Do nothing
    return;
  }

  // We are in a vsite
  if (og_is_group_content_type('node', $type) && !vsite_access_user_access($vsite->group,$account)) {
    return NODE_ACCESS_DENY;
  }
}

function vsite_access_user_access($group, $account = NULL){
  global $user;
  $account = isset($account) ? $account : $user;

  $wrapper = entity_metadata_wrapper('node', $group);

  if(!empty($wrapper->{VSITE_ACCESS_FIELD}) && $wrapper->{VSITE_ACCESS_FIELD}->value()){
    // Private group.
    if(!user_access('administer group') && !og_is_member('node', $group->nid,'user',$account)){
      // They are not a member, deny access
      return false;
    }
  }

  //This is a public site, or they have access
  return true;
}

/**
 * Implements hook_node_access_records_alter().
 *
 * Move files from private to public.
 */
function vsite_access_node_access_records_alter(&$grants, $node) {
  if (empty($node->is_new)) {
    // This is node-update operation.
    return;
  }
  if (!($private_folder = variable_get('file_private_path', FALSE))) {
    // Private path is not configured, so no need to preform our logic.
    return;
  }

  if (!$grants) {
    // Node is public, so keep all the files public.
    return;
  }

  // Get all the image and file fields in the node.
  $fields = array();
  foreach (field_info_instances('node', $node->type) as $instance) {
    $field_name = $instance['field_name'];
    $field = field_info_field($field_name);
    if (!in_array($field['type'], array('image', 'file'))) {
      continue;
    }

    if ($field['settings']['uri_scheme'] == 'private') {
      // Field is already private.
      continue;
    }

    $fields[] = $field_name;
  }

  if (!$fields) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  foreach ($fields as $field_name) {
    if (!$files = $wrapper->{$field_name}->value()) {
      // No files in the field.
      continue;
    }
    // The file widget always returns an array, but if it's a single value
    // it is not keyed.
    $files = empty($files['fid']) ? $files : array($files);
    foreach ($files as $file) {
      $file = file_load($file['fid']);

      // Create the upload folder if it's not exists.
      if (!is_dir($private_folder)) {
        // Change the private folder path to private:// for the uri format.
        drupal_mkdir('private://', NULL, TRUE);
      }

      // Move the file to private.
      $destination = str_replace('public://', 'private://', $file->uri);
      file_move($file, $destination);
    }
  }
}
