<?php

/**
 * @files
 * OpenScholar files private module file.
 */

/**
 * Implements hook_menu_alter().
 */
function os_files_private_menu_alter(&$callbacks) {
  $callbacks['file-list'] = $callbacks['admin/content/file'];
  $callbacks['file-list']['access callback'] = 'os_files_private_file_list';
  $callbacks['file-list']['page callback'] = 'views_embed_view';
  $callbacks['file-list']['page arguments'] = array('cp_files', 'default');
}

/**
 * Access callback - Determine if the user can manage the files entity for
 * a VSite.
 */
function os_files_private_file_list() {
  if (!$space = spaces_get_space()) {
    return;
  }

  return og_user_access('node', $space->id, 'administer files');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Set the default group to the current user in file/%fid/edit.
 */
function os_files_private_form_file_entity_edit_alter(&$form, &$form_state) {
  $form['og_group_ref']['und']['0']['default']['#default_value'] = spaces_get_space()->id;
}

/**
 * Submit handler; Redirect to "file-list" after file upload.
 *
 * @see file_entity_add_upload_submit()
 */
function os_files_private_form_file_entity_add_upload_submit($form, &$form_state) {
  $file = file_load($form_state['values']['upload']);

  // Redirect to the file edit page after submission.
  if (file_entity_access('edit', $file)) {
    $destination = array('destination' => 'file-list');
    if (isset($_GET['destination'])) {
      $destination = drupal_get_destination();
      unset($_GET['destination']);
    }
    $form_state['redirect'] = array('file/' . $file->fid . '/edit', array('query' => $destination));
  }
  else {
    $form_state['redirect'] = 'admin/content/file';
  }
}

/**
 * Implements hook_os_add_new_links_alter().
 *
 * Adds a page contextual link for importing biblio nodes.
 */
function os_files_private_os_add_new_links_alter(&$links) {
  $item = menu_get_item();

  if (!in_array($item['path'], array('file-list', 'file/%', 'file/%/edit'))) {
    return;
  }

  $links['add_new_file'] = array(
    'title' => t('Add file'),
    'href' => 'file/add',
    'html' => TRUE,
  );
}

/**
 * Implements hook_og_permission().
 */
function os_files_private_og_permission() {
  return array(
    'administer site files' => array(
      'title' => t('Manage site files'),
      'description' => t('Manage the files for the site.'),
    ),
  );
}

/**
 * Implements hook_cp_settings().
 * @return array
 */
function os_files_private_cp_settings() {
  $settings = array();

  $settings['os_files_private_restrict_mode'] = array(
    'form' => array(
      '#type' => 'radios',
      '#title' => t('Select which users should have access to your private files (when private files are enabled)'),
      '#default_value' => variable_get('os_files_private_restrict_mode', 'selected_users'),
      '#options' => array(
        'all_users'         => t('All users (including anonymous users)'),
        'registered_users'  => t('Registered users (all members of the site, but not anonymous users)'),
        'harvard_employees' => t('Harvard employees only (requires pinserver)'),
        'selected_users'    => t('Only users you select from your People menu'),
      ),
      '#description' => t('Private file access must be enabled by the site administrator for this setting to work.'),
    ),
    'group' => array(
      '#id' => 'restrict_mode',
      '#title' => t('Private File Access'),
      '#weight' => 10,
    ),
    'submit' => array('os_files_private_cp_settings_submit'),
  );

  return $settings;
}

/**
 * Submit function for os_files_private_cp_settings().
 */
function os_files_private_cp_settings_submit(&$form, &$form_state) {
  variable_set('os_files_private_restrict_mode', $form_state['values']['os_files_private_restrict_mode']);
}

/**
 * Implements hook_file_download().
 *
 * Serve public files from a vsite directory.
 */
function os_files_private_file_download($uri) {
  //  global $user;
  $file = array();
  $restrict_mode = variable_get('os_files_private_restrict_mode');
  $query = new EntityFieldQuery;

  $result = $query
    ->entityCondition('entity_type', 'file')
    ->propertyCondition('uri', $uri, '=')
    ->addMetaData('account', user_load(1))
    ->execute();

  $fid = isset($result['file']) ? reset(array_keys($result['file'])) : '';

  if (!$fid || !($file = file_load($fid))) {
    return;
  }

  // Check if private files have special permissions (registered/public/employees).
  if ($restrict_mode == 'registered_users') {
    // Private files available for all registered users; bypass OG check and just verify/redirect to pinserver.
    if (!user_is_anonymous() || (function_exists('pinserver_check_status') && pinserver_check_status())) {
      return file_get_content_headers($file);
    }
    if (function_exists('pinserver_redirect')) {
      return pinserver_redirect(array('redirect_uri' => $_SERVER['REQUEST_URI']));
    }
    else if(user_is_anonymous()) {
      return drupal_goto('user/login', array('query' => drupal_get_destination()));
    }
  }
  else if ($restrict_mode == 'all_users') {
    // Private files can be seen by all users!
    return file_get_content_headers($file);
  }
  else if ($restrict_mode == 'harvard_employees') {
    // Only Harvard employees can view private files.
    if(function_exists('pinserver_is_harvard_employee') && pinserver_is_harvard_employee()) {
      return file_get_content_headers($file);
    }
    else if (function_exists('pinserver_redirect')) {
      return pinserver_redirect(array('redirect_uri' => $_SERVER['REQUEST_URI']));
    }
    else {
      return -1;
    }
  }

  // Check OG group permissions; private files for selected users only.
  // ($restrict_mode == ['selected_users' || ''])
  $wrapper = entity_metadata_wrapper('file', $file);
  $gid = array(NULL);  // Set $gid[0] to something so og_is_member() below can't complain.

  if (!isset($wrapper->{OG_AUDIENCE_FIELD}) || !($gid = $wrapper->{OG_AUDIENCE_FIELD}->value(array('identifier' => TRUE)))) {
    // No OG audience set. If this happens it is probably an accident, or the user selected "None" for their "Groups audience".
    return -1;
  }

  if (!og_is_member('node', $gid[0])) {
    if (function_exists('pinserver_check_status') && !pinserver_check_status()) {
      // User is not OG member or logged in via pinserver, so send to pinserver.
      return pinserver_redirect(array('redirect_uri' => $_SERVER['REQUEST_URI']));
    }
    else if(user_is_anonymous()) {
      return drupal_goto('user/login', array('query' => drupal_get_destination()));
    }
    return -1;
  }

  // All checks passed; serve user the file.
  return file_get_content_headers($file);
}
